#include <Adafruit_CircuitPlayground.h>
#include <Wire.h>
#include <SPI.h>

int pixelIndex = 0; //Pixel spin 
unsigned long lastUpdate = 0; //Health update
int delayTime = 200;
String mood = "neutral"; //Starting mood
unsigned long lastCareTime = 0;
int health = 100;
unsigned long lastHealthUpdate = 0; //Also a health update
unsigned long lastRecoveryTime = 0; 
bool start = true; //Condition of "beginning" to say hello

void setup() {
  CircuitPlayground.begin();
  Serial.begin(9600);
  Serial.println("Tamagotchi awakened! Full health");
}

void loop() {

if (start) {
    const uint8_t spHELLO[] PROGMEM ={0x00,0xC0,0x80,0x60,0x59,0x08,0x10,0x3D,0xB7,0x00,0x62,0x64,0x3D,0x55,0x4A,0x9E,0x66,0xDA,0xF6,0x56,0xB7,0x3A,0x55,0x76,0xDA,0xED,0x92,0x75,0x57,0xA3,0x88,0xA8,0xAB,0x02,0xB2,0xF4,0xAC,0x67,0x23,0x73,0xC6,0x2F,0x0C,0xF3,0xED,0x62,0xD7,0xAD,0x13,0xA5,0x46,0x8C,0x57,0xD7,0x21,0x0C,0x22,0x4F,0x93,0x4B,0x27,0x37,0xF0,0x51,0x69,0x98,0x9D,0xD4,0xC8,0xFB,0xB8,0x98,0xB9,0x56,0x23,0x2F,0x93,0xAA,0xE2,0x46,0x8C,0x52,0x57,0x66,0x2B,0x8C,0x07};
    CircuitPlayground.speaker.say(spHELLO);
    start = false;
  }

  // --- CARE LOGIC ---
  if (health <= 0) {
    CircuitPlayground.clearPixels();
    const uint8_t spSORRY[]   PROGMEM ={0x06,0x38,0xD6,0xD4,0x03,0x01,0xF8,0x5E,0x35,0x00,0x3F,0xBA,0x45,0x20,0x03,0xCB,0x77,0xD6,0xDA,0x35,0x6D,0x9F,0xD8,0x27,0xDF,0x10,0x4F,0x7B,0xE3,0x13,0x87,0x6C,0xE7,0xA6,0x69,0x6E,0x7C,0x12,0x57,0xEC,0xCC,0xB5,0xED,0xCA,0x4C,0xB3,0xB3,0x94,0x2C,0xA3,0xB2,0x4D,0xC7,0x06,0xD7,0x8E,0xC6,0x57,0x69,0x19,0x69,0x37,0xFB,0xD1,0xA7,0xCA,0x66,0x31,0x0D,0x7B,0xDF,0xFA,0x32,0xC8,0x35,0x36,0x56,0xE9,0x72,0x03,0xB3,0x38,0x49,0xA5,0xAD,0xD5,0x21,0xB4,0x4B,0x9B,0xC6,0x19,0xE6,0xF7,0x90,0xF2};
    const uint8_t spGOODBYE[] PROGMEM ={0xA9,0x49,0xE1,0x54,0x91,0x2D,0xAF,0x22,0x07,0x55,0x29,0x69,0x7B,0xF2,0x18,0x38,0x32,0x3C,0xCB,0x4D,0x52,0xC8,0x4A,0x5A,0x65,0x99,0x52,0x21,0x6A,0x61,0x69,0x2E,0x45,0x46,0x2C,0x43,0xA9,0x3C,0x3D,0x1C,0x87,0x2A,0x3A,0xFB,0x50,0x6E,0x73,0xEB,0xDB,0xEC,0x6E,0x77,0xA3,0xF7,0xD1,0x4E,0x35,0xA2,0xCC,0x7E,0x74,0x3E,0xC6,0xA8,0x79,0x85,0xD1,0x86,0x64,0x65,0x16,0x95,0x5B,0x13,0x52,0xB0,0x65,0x94,0x2E,0xB5,0x4D,0x6A,0x55,0x65,0xF8,0x01,0x00,0x00};
    CircuitPlayground.speaker.say(spSORRY);
    CircuitPlayground.speaker.say(spGOODBYE);

    Serial.println("ðŸ’€ Your Tamagotchi perished.");
    while (true); // Stop program
  }

  // Feed
  if (CircuitPlayground.leftButton()) {
    mood = "happy";
    lastCareTime = millis();
    const uint8_t spGOOD[] PROGMEM ={0xA3,0x8D,0x29,0x58,0x3C,0x33,0xDF,0xEC,0x14,0x59,0x68,0x6B,0x4A,0xF6,0x5B,0xDD,0xEA,0x56,0xA7,0xB2,0xC6,0x2B,0x3D,0x3A,0xEC,0xBA,0xD7,0xAA,0x26,0xBC,0xD2,0x23,0x1D,0x3C,0x00,0x00};
    CircuitPlayground.speaker.say(spGOOD);
    Serial.println("Fed Tamagotchi!");
  }

  // Play
  if (CircuitPlayground.rightButton()) {
    mood = "excited";
    lastCareTime = millis();
    const uint8_t spGOOD[] PROGMEM ={0xA3,0x8D,0x29,0x58,0x3C,0x33,0xDF,0xEC,0x14,0x59,0x68,0x6B,0x4A,0xF6,0x5B,0xDD,0xEA,0x56,0xA7,0xB2,0xC6,0x2B,0x3D,0x3A,0xEC,0xBA,0xD7,0xAA,0x26,0xBC,0xD2,0x23,0x1D,0x3C,0x00,0x00};
    CircuitPlayground.speaker.say(spGOOD);
    Serial.println("Played with Tamagotchi!");
  }

  // --- SLEEP MODE ---
  if (!CircuitPlayground.slideSwitch()) {
    mood = "sleepy";

    // Calculate breathing brightness using sine wave
    float breathSpeed = 0.002; // Adjust for breathing rate
    float t = millis();
    float brightness = (sin(t * breathSpeed) + 1.0) / 2.0; // 0.0 to 1.0
    int scaledBrightness = (int)(brightness * 255);

    // Get sleepy color and scale brightness
    uint32_t baseColor = getMoodColor(mood);
    uint8_t r = (baseColor >> 16) & 0xFF;
    uint8_t g = (baseColor >> 8) & 0xFF;
    uint8_t b = baseColor & 0xFF;
    CircuitPlayground.clearPixels();
    CircuitPlayground.setPixelColor(0, r * brightness, g * brightness, b * brightness);

    // Health recovery while sleeping
    if (millis() - lastRecoveryTime > 1000) {
      if (health < 100) {
        health++;
        Serial.print("ðŸŒ™ Resting... Health = ");
        Serial.println(health);
      }
      lastRecoveryTime = millis();
    }

    delay(20); // Smooth fade
    return;    // Skip rest of loop
  }

  // Check for neglect :(
  if (millis() - lastCareTime > 10000) {
    mood = "sad";
  }

  // --- HEALTH SYSTEM ---
  if (mood == "sad" && millis() - lastHealthUpdate > 1000) {
    health = max(0, health - 1);
    lastHealthUpdate = millis();
    const uint8_t spPROBLEM[] PROGMEM ={0x0C,0xC0,0x36,0x4C,0x01,0x2E,0xA9,0x0B,0xC0,0x36,0x2F,0x02,0xB8,0x0E,0xB1,0x62,0x1B,0x3B,0x22,0x28,0xDD,0x4D,0x4E,0xEA,0xFD,0x54,0x70,0xB8,0xB9,0xE9,0xCD,0x56,0x66,0x63,0x55,0xB0,0x35,0x31,0x15,0xF7,0xD6,0x2A,0xEA,0x59,0xD4,0x38,0x66,0x19,0xB7,0x1D,0xD7,0x08,0xE3,0xE1,0x1E,0x4A,0x5B,0xE5,0x9D,0x8C,0xB3,0xD9,0x1F,0x75,0x34,0x39,0x29,0x94,0xFE,0x36,0xB7,0xDD,0xDD,0xE8,0x7C,0xA8,0x0A,0x81,0xA6,0x61,0x88,0x0E,0x5B,0x54,0xD5,0xC6,0x3E,0xF6,0x7E,0x70,0x83,0x77,0x34,0x22,0xAA,0xC5,0x0C,0xDA,0x6A,0x09,0xA7,0x9A,0x07};
    CircuitPlayground.speaker.say(spPROBLEM);
    Serial.print("Health decreasing... ");
    Serial.println(health);
  }

  // --- SPIN SPEED BASED ON MOTION ---
  float x = CircuitPlayground.motionX();
  float y = CircuitPlayground.motionY();
  float z = CircuitPlayground.motionZ();
  float magnitude = sqrt(x * x + y * y + z * z);
  delayTime = map(constrain(magnitude * 10, 10, 25), 10, 25, 200, 20);

  if (millis() - lastUpdate > delayTime) {
    lastUpdate = millis();
    CircuitPlayground.clearPixels();
    CircuitPlayground.setPixelColor(pixelIndex, getMoodColor(mood));
    pixelIndex = (pixelIndex + 1) % 10;
    delay(10);
  }
  delay(100);
}

// --- MOOD TO COLOR ---
uint32_t getMoodColor(String mood) {
  if (mood == "happy") {
    return CircuitPlayground.colorWheel(30); // Yellow
  } else if (mood == "excited") {
    return CircuitPlayground.colorWheel(0); // Red
  } else if (mood == "sleepy") {
    return CircuitPlayground.colorWheel(200); // Purple
  } else if (mood == "sad") {
    return CircuitPlayground.colorWheel(160); // Blue
  } else {
    return CircuitPlayground.colorWheel(120); // Green (neutral)
  }
}
